#include<stdio.h>
int n,m;
struct Item
{
    char id;
    int profit;
    int weight;
    double x;
};
struct Item item[100];
double itemAmount[100]={0.0};

void input_items()
{
    for(int i=0;i<n;i++)
    {
        item[i].id=(char)(65+i);
        printf("\n\nFor item %c :-\n",item[i].id);

        printf("\nEnter the profit : ");
        scanf("%d",&item[i].profit);

        printf("Enter the weight : ");
        scanf("%d",&item[i].weight);

        item[i].x=(double)item[i].profit/item[i].weight;        // Explicitly typecasting to (double), otherwise it results in integer division
    }
}

void merge_items(int low,int mid,int high)
{
    int i=low,j=mid+1,k=0;
    struct Item b[high-low+1];

    while(i<=mid && j<=high)
    {
        if(item[i].x>=item[j].x)
        {
            b[k++]=item[i++];
        }
        else
        {
            b[k++]=item[j++];
        }
    }
    while(i<=mid)
    {
        b[k++]=item[i++];
    }
    while(j<=high)
    {
        b[k++]=item[j++];
    }
    k=0;
    for(int a=low;a<=high;a++)
    {
        item[a]=b[k++];
    }
}

void mergeSort_items(int low,int high)
{
    if(low<high)
    {
        int mid=(low+high)/2;
        mergeSort_items(low,mid);
        mergeSort_items(mid+1,high);                       
        merge_items(low,mid,high);
    }
}

void fractional_Knapsack()
{
    int u=m,count=0;
    printf("\n\n---- The items selected are : ----\n");
    for(int i=0;i<n;i++)
    {
        if(u>=item[i].weight)                                // If the remaining knapsack capacity >= that item weight , take the full item (item amount=1)
        {
            u=u-item[i].weight;                             // Calculating the remaining capacity of knapsack
            itemAmount[i]=1.0;
            printf("\n%d. Item %c : Profit = Rs.%d ; Weight taken = %d unit(s) ; Remaning knapsack capacity : %d",++count,item[i].id,item[i].profit,item[i].weight,u);
        }
        else
        {
            itemAmount[i]=(double)u/item[i].weight;       // fraction of the item is taken (therefore fractional knapsack)
            printf("\n%d. Item %c : Profit = Rs.%lf ; Weight taken = %d unit(s) ; Remaning knapsack capacity : %d",++count,item[i].id,item[i].profit*itemAmount[i],u,0);
            break;                                       // Terminating the loop since the knapsack is completely filled
        }
    }
}

void calculate_Profit()
{
    double p=0.0;
    int i=0;
    while(itemAmount[i]>0.0)                    // It is looping till the amount of item considered is > 0.0 , since after that, no items are considered as the knapsack is completely filled
    {
        p=p+(item[i].profit*itemAmount[i++]);
    }
    printf("\n\nThe maximized profit is Rs.%lf",p);
}

void main()
{
    printf("\n\n ------- : FRACTIONAL KNAPSACK : ------- \n\n");
    printf("\nEnter the number of items : ");
    scanf("%d",&n);
    printf("\nEnter the knapsack capacity : ");
    scanf("%d",&m);
    
    input_items();
    mergeSort_items(0,n-1);     // Sorting the knapsack items with respect to their profit/weight ratio
    fractional_Knapsack();      // Evaluating which items are to be taken in the knapsack and by what amount
    calculate_Profit();         // Calculating the maximized profit
}